<<<<<<< HEAD
getwd()
a <- 1
delete(a)
drop(a)
rm(a)
clear
cls
help(scan)
a <- 1
rm(a)
cas
c
sc
asc
asc
help("flush")
source('~/1. Universidad/3º/2. Junio/M.I.N/MIN_UCM/Interconexión con Twitter (ALUMNOS).R')
# Ahora sin el indicador de idioma:
s2 <- searchTwitter("corazon", n=200, resultType="recent")
searchTwitter("corazon", n=200, lang="ES", resultType="recent")
searchTwitter("heart", n=200, lang="EN", resultType="recent")
install.packages("xml", dependencies = TRUE)
yes
install.packages("XML", dependencies = TRUE)
install.packages('devtools')
devtools::install_github("omegahat/RHTMLForms")
google.com
source('C:/Users/artur/AppData/Local/Temp/7zO80DFF63F/Web Mining Google.R')
source('~/1F1C7~1.UNI/3CDDC~1/2A1CB~1.JUN/MIA4D2~1.N/Teoria/TEMA3~1.MIN/331~1.IMP/TEMA33~1.1(4/WEBMIN~1.R')
# google url
google = "http://www.google.com"
browseURL(webMinable)
if(url.exists(webMinable))
{ # Abre la página web en el navegador por defecto
browseURL(webMinable)
r <- GET(webMinable
)
}
if(url.exists(webMinable))
{ # Abre la página web en el navegador por defecto
browseURL(webMinable)
}
if(url.exists(webMinable))
{ # Abre la página web en el navegador por defecto
browseURL(webMinable)
}
source('~/1F1C7~1.UNI/3CDDC~1/2A1CB~1.JUN/MIA4D2~1.N/Teoria/TEMA3~1.MIN/331~1.IMP/TEMA33~1.1(4/WEBMIN~1.R')
devtools::install_github("omegahat/RHTMLForms")
source('~/1F1C7~1.UNI/3CDDC~1/2A1CB~1.JUN/MIA4D2~1.N/Teoria/TEMA3~1.MIN/331~1.IMP/TEMA33~1.1(4/WEBMIN~1.R')
source('~/1F1C7~1.UNI/3CDDC~1/2A1CB~1.JUN/MIA4D2~1.N/Teoria/TEMA3~1.MIN/331~1.IMP/TEMA33~1.1(4/EXTRAC~1.R')
source('~/1. Universidad/3º/2. Junio/M.I.N/MIN_UCM/Extracción de datos de la web de ISO.R')
x <= c(1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 4)
x <- c(1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 4)
print(x)
y <- table(x)
print(y)
print(barplot(x))
print(barplot(y))
rnorm(100)
samply()
sapply()
sampply(5)
setwd("C:\Users\artur\Documents\1. Universidad\3º\2. Junio\M.I.N\MIN_UCM")
setwd("C:/Users/artur/Documents/1. Universidad/3º/2. Junio/M.I.N/MIN_UCM")
clear
cls
cls()
source(limpiarDataset.R)
source("./sample/datasets/limpiarDataset.R")
source("sample/datasets/limpiarDataset.R")
source("sample/datasets/limpiarDataset.R")
getwd()
source("proyecto/sample/datasets/limpiarDataset.R")
source("proyecto/explore/graficas.r")
plotVsMonth(datasets[[1]], "Temperature....Celsius.", 2017)
plotVsMonth(datasets[[1]], "Temperature....Celsius.", 2016)
setwd(..)
setwd("./proyecto")
getwd()
plotVsMonth(datasets[[1]], "Temperature....Celsius.", 2016)
source("proyecto/sample/datasets/limpiarDataset.R")
source("sample/datasets/limpiarDataset.R")
plotVsMonth(datasets[[1]], "Temperature....Celsius.", 2016)
source("proyecto/explore/graficas.r")
source("explore/graficas.r")
plotVsMonth(datasets[[1]], "Temperature....Celsius.", 2016)
n <- datasets$NORWAY
plotVsMonth(n, "Temperature....Celsius.", 2016)
View(datasets)
n <- datasets$ITALY
plotVsMonth(n, "Temperature....Celsius.", 2016)
n <- datasets$SYRIA
plotVsMonth(n, "Temperature....Celsius.", 2016)
n <- datasets$SAUDI_ARABIA
plotVsMonth(n, "Temperature....Celsius.", 2016)
n <- datasets$COLOMBIA
plotVsMonth(n, "Temperature....Celsius.", 2016)
n <- datasets$ANTARCTICA
plotVsMonth(n, "Temperature....Celsius.", 2016)
plotVsMonth(n, "Temperature....Celsius.", 2015)
plotVsMonth(n, "Temperature....Celsius.", 2006)
plotVsMonth(n, "Temperature....Celsius.", 2003)
n <- datasets$ANTARCTICA
print(n)
n <- datasets$EGYPT
plotVsMonth(n, "Temperature....Celsius.", 2003)
=======
rm(lista = ls())
source('~/Github/MIN_UCM/proyecto/explore/clustering.r')
rm(ls())
rm(l = ls())
rm(l <- ls())
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
setwd("~/Github/MIN_UCM/proyecto")
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
predictClimate(25,200)
install.packages("clue")
predictClimate(25,200)
predictClimate <- function(temperature,raining){
require("clue")
clue::cl_predict(result,matrix(c(temperature,raining),ncol=2));
}
#Ejecutar todo el script hasta que salga un grafico con los grupos bien diferenciados
source("explore/clustering/cargaFinalClustering.r")
data <- loadTraining(30); #esta funcion esta en cargaFinalClustering.r
temperature<-data$temperatures;
raining<-data$raining;
names<-data$names;
temperatureRain <- matrix(c(temperature,raining),ncol=2); #Una columna para las temperaturas y otra para las lluvias.
#clustering jerarquico para ver cuantos grupos tiene sentido hacer
plot(hclust(dist(temperatureRain)))
result <- kmeans(temperatureRain,4)
#para dibujar
plot(temperatureRain,col=result$cluster)
climateNames <- vector(mode="number",length = 4);
climateNames[predictClimate(c(temperatures,mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Temperature)))),c(raining,mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Rain)))))]
predictClimate <- function(temperature,raining){
require("clue")
clue::cl_predict(result,matrix(c(temperature,raining),ncol=2));
}
#Ejecutar todo el script hasta que salga un grafico con los grupos bien diferenciados
source("explore/clustering/cargaFinalClustering.r")
data <- loadTraining(30); #esta funcion esta en cargaFinalClustering.r
temperature<-data$temperatures;
raining<-data$raining;
names<-data$names;
temperatureRain <- matrix(c(temperature,raining),ncol=2); #Una columna para las temperaturas y otra para las lluvias.
#clustering jerarquico para ver cuantos grupos tiene sentido hacer
plot(hclust(dist(temperatureRain)))
result <- kmeans(temperatureRain,4)
#para dibujar
plot(temperatureRain,col=result$cluster)
climateNames <- vector(length = 4);
climateNames[predictClimate(c(temperatures,mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Temperature)))),c(raining,mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Rain)))))]
predictClimate <- function(temperature,raining){
require("clue")
clue::cl_predict(result,matrix(c(temperature,raining),ncol=2));
}
#Ejecutar todo el script hasta que salga un grafico con los grupos bien diferenciados
source("explore/clustering/cargaFinalClustering.r")
data <- loadTraining(30); #esta funcion esta en cargaFinalClustering.r
temperature<-data$temperatures;
raining<-data$raining;
names<-data$names;
temperatureRain <- matrix(c(temperature,raining),ncol=2); #Una columna para las temperaturas y otra para las lluvias.
#clustering jerarquico para ver cuantos grupos tiene sentido hacer
plot(hclust(dist(temperatureRain)))
result <- kmeans(temperatureRain,4)
#para dibujar
plot(temperatureRain,col=result$cluster)
climateNames <- vector(length = 4);
climateNames[predictClimate(mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Temperature))),mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Rain))))]
mode(1)
mode("hola")
predictClimate <- function(temperature,raining){
require("clue")
clue::cl_predict(result,matrix(c(temperature,raining),ncol=2));
}
#Ejecutar todo el script hasta que salga un grafico con los grupos bien diferenciados
source("explore/clustering/cargaFinalClustering.r")
data <- loadTraining(30); #esta funcion esta en cargaFinalClustering.r
temperature<-data$temperatures;
raining<-data$raining;
names<-data$names;
temperatureRain <- matrix(c(temperature,raining),ncol=2); #Una columna para las temperaturas y otra para las lluvias.
#clustering jerarquico para ver cuantos grupos tiene sentido hacer
plot(hclust(dist(temperatureRain)))
result <- kmeans(temperatureRain,4)
#para dibujar
plot(temperatureRain,col=result$cluster)
climateNames <- vector(mode = "character",length = 4);
climateNames[predictClimate(mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Temperature))),mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Panama.csv",header = TRUE, sep = ",")$Rain))))] = "tropical";
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Saudi Arabia.csv",header = TRUE, sep = ",")$Temperature)))
mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Saudi Arabia.csv",header = TRUE, sep = ",")$Rain))))
mean(as.double(na.omit(read.csv2(stringsAsFactors = FALSE,"sample/datasets/datasetsFinales/Saudi Arabia.csv",header = TRUE, sep = ",")$Rain)))
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
climateNames[predictClimate(25,200)]
climateNames[predictClimate(25,0)]
climateNames[predictClimate(25,50)]
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
climateNames[predictClimate(25,0)]
climateNames[predictClimate(20,200)]
climateNames[predictClimate(10,200)]
climateNames[predictClimate(3,200)]
climateNames[predictClimate(0,200)]
climateNames[predictClimate(25,200)]
climateNames[predictClimate(25,100)]
climateNames[predictClimate(0,100)]
climateNames[predictClimate(100,100)]
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
source('~/Github/MIN_UCM/proyecto/explore/clustering/clustering.r')
>>>>>>> cee205e0e228ca898a9d9cb1c5514e877b85ad29
